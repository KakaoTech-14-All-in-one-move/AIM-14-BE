spring:
  application:
    name: pitching
  sql:
    init:
      mode: always        # Execute schema.sql every time the application starts
      schema-locations: classpath:schema.sql  # Specify the location of schema.sql file
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post  # POST 방식으로 변경
            scope:
              - profile
              - account_email
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

jwt:
  secret: ${JWT_SECRET_KEY}
  access-token:
    expiration: PT1H  # 1 hour
  refresh-token:
    expiration: P7D  # 7 day

front:
  url: ${FRONT_URL}

app:
  upload:
    dir: ./uploads
    max-file-size: 2MB  # FileStorageService에서 사용할 제한 : 2MB
---
# local
redis:
  host: localhost
  port: 6379
  maxlen: 500
  
server:
  port: ${LOCAL_PORT:8080}
  call:
    protocol: ws
    host: localhost
    websocket-path: /ws/v1/voice
    heartbeat-interval: 450s
    
spring:
  r2dbc:
    url: ${LOCAL_POSTGRESQL_URL}
    username: ${LOCAL_POSTGRESQL_USERNAME}
    password: ${LOCAL_POSTGRESQL_PASSWORD}
#  TODO: 필요시
#  초기 단계에서는 현재처럼 schema.sql 사용
#  프로젝트가 커지고 복잡해지면 Liquibase 도입 검토
#  liquibase:
#    enabled: true # 선택: Liquibase를 사용해 자동 마이그레이션 관리 시
logging:
  level:
    reactor.netty.udp: DEBUG
    org.springframework.r2dbc: DEBUG # R2DBC 관련 로깅 활성화 (문제 파악에 유용
---
