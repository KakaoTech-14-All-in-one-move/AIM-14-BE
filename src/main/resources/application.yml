spring:
  application:
    name: pitching
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "https://api.pitching.site/login/oauth2/code/google"
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "https://api.pitching.site/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "https://api.pitching.site/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile
              - account_email
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
aws:
  region: ap-northeast-2
  dynamodb:
    endpoint: dynamodb.ap-northeast-2.amazonaws.com
  accessKey: ${AWS_ACCESS_KEY}
  secretKey: ${AWS_SECRET_KEY}
  s3:
    bucket: pitching-bucket
app:
  upload:
    max-file-size: 2MB

springdoc:
  swagger-ui:
    path: /swagger-ui/index.html
    enabled: true
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
    display-request-duration: true
  api-docs:
    enabled: true
    path: /v3/api-docs
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
    - /ws/**

jwt:
  secret: ${JWT_SECRET_KEY}
  access-token:
    expiration: PT1H
  refresh-token:
    expiration: P7D

front:
  url: ${FRONT_URL}

---
# default
redis:
  host: localhost
  port: 6379
  maxlen: 500

server:
  port: ${LOCAL_PORT:8080}
  call:
    protocol: ws
    host: localhost
    port: ${LOCAL_PORT:8080}
    websocket-path: /ws/v1/voice
    heartbeat-interval: 20s

kms:
  protocol: ws
  host: localhost
  port: 8888

spring:
  r2dbc:
    url: ${LOCAL_POSTGRESQL_URL}
    username: ${LOCAL_POSTGRESQL_USERNAME}
    password: ${LOCAL_POSTGRESQL_PASSWORD}
  rabbitmq:
    host: localhost
    port: 5672
    username: ${LOCAL_RABBITMQ_USERNAME}
    password: ${LOCAL_RABBITMQ_PASSWORD}
    connection-timeout: 10000
logging:
  level:
    org.springframework.r2dbc: DEBUG
    org.springdoc: DEBUG
---
# prod
spring:
  config:
    activate:
      on-profile: prod
  r2dbc:
    url: ${PROD_POSTGRESQL_URL}
    username: ${PROD_POSTGRESQL_USERNAME}
    password: ${PROD_POSTGRESQL_PASSWORD}
  rabbitmq:
    host: ${PROD_RABBITMQ_HOST}
    port: 5672
    username: ${PROD_RABBITMQ_USERNAME}
    password: ${PROD_RABBITMQ_PASSWORD}
    connection-timeout: 10000
redis:
  host: ${PROD_REDIS_HOST}
  port: ${PROD_REDIS_PORT:6379}
  maxlen: 500

kms:
  protocol: ws
  host: ${PROD_KMS_HOST}
  port: ${PROD_KMS_PORT:8888}

server:
  port: ${PROD_BE_PORT:8080}
  call:
    protocol: wss
    host: ${PROD_BE_HOST}
    port: 443
    websocket-path: /ws/v1/voice
    heartbeat-interval: 30s

logging:
  level:
    root: info